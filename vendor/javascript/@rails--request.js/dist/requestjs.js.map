// @rails/request.js@0.0.9/dist/requestjs.js.map downloaded from https://ga.jspm.io/npm:@rails/request.js@0.0.9/dist/requestjs.js.map

{"version":3,"file":"requestjs.js","sources":["../dist/requestjs.js"],"sourcesContent":["class FetchResponse {\n  constructor(response) {\n    this.response = response;\n  }\n  get statusCode() {\n    return this.response.status;\n  }\n  get redirected() {\n    return this.response.redirected;\n  }\n  get ok() {\n    return this.response.ok;\n  }\n  get unauthenticated() {\n    return this.statusCode === 401;\n  }\n  get unprocessableEntity() {\n    return this.statusCode === 422;\n  }\n  get authenticationURL() {\n    return this.response.headers.get(\"WWW-Authenticate\");\n  }\n  get contentType() {\n    const contentType = this.response.headers.get(\"Content-Type\") || \"\";\n    return contentType.replace(/;.*$/, \"\");\n  }\n  get headers() {\n    return this.response.headers;\n  }\n  get html() {\n    if (this.contentType.match(/^(application|text)\\/(html|xhtml\\+xml)$/)) {\n      return this.text;\n    }\n    return Promise.reject(new Error(`Expected an HTML response but got \"${this.contentType}\" instead`));\n  }\n  get json() {\n    if (this.contentType.match(/^application\\/.*json$/)) {\n      return this.responseJson || (this.responseJson = this.response.json());\n    }\n    return Promise.reject(new Error(`Expected a JSON response but got \"${this.contentType}\" instead`));\n  }\n  get text() {\n    return this.responseText || (this.responseText = this.response.text());\n  }\n  get isTurboStream() {\n    return this.contentType.match(/^text\\/vnd\\.turbo-stream\\.html/);\n  }\n  async renderTurboStream() {\n    if (this.isTurboStream) {\n      if (window.Turbo) {\n        await window.Turbo.renderStreamMessage(await this.text);\n      } else {\n        console.warn(\"You must set `window.Turbo = Turbo` to automatically process Turbo Stream events with request.js\");\n      }\n    } else {\n      return Promise.reject(new Error(`Expected a Turbo Stream response but got \"${this.contentType}\" instead`));\n    }\n  }\n}\n\nclass RequestInterceptor {\n  static register(interceptor) {\n    this.interceptor = interceptor;\n  }\n  static get() {\n    return this.interceptor;\n  }\n  static reset() {\n    this.interceptor = undefined;\n  }\n}\n\nfunction getCookie(name) {\n  const cookies = document.cookie ? document.cookie.split(\"; \") : [];\n  const prefix = `${encodeURIComponent(name)}=`;\n  const cookie = cookies.find((cookie => cookie.startsWith(prefix)));\n  if (cookie) {\n    const value = cookie.split(\"=\").slice(1).join(\"=\");\n    if (value) {\n      return decodeURIComponent(value);\n    }\n  }\n}\n\nfunction compact(object) {\n  const result = {};\n  for (const key in object) {\n    const value = object[key];\n    if (value !== undefined) {\n      result[key] = value;\n    }\n  }\n  return result;\n}\n\nfunction metaContent(name) {\n  const element = document.head.querySelector(`meta[name=\"${name}\"]`);\n  return element && element.content;\n}\n\nfunction stringEntriesFromFormData(formData) {\n  return [ ...formData ].reduce(((entries, [name, value]) => entries.concat(typeof value === \"string\" ? [ [ name, value ] ] : [])), []);\n}\n\nfunction mergeEntries(searchParams, entries) {\n  for (const [name, value] of entries) {\n    if (value instanceof window.File) continue;\n    if (searchParams.has(name) && !name.includes(\"[]\")) {\n      searchParams.delete(name);\n      searchParams.set(name, value);\n    } else {\n      searchParams.append(name, value);\n    }\n  }\n}\n\nclass FetchRequest {\n  constructor(method, url, options = {}) {\n    this.method = method;\n    this.options = options;\n    this.originalUrl = url.toString();\n  }\n  async perform() {\n    try {\n      const requestInterceptor = RequestInterceptor.get();\n      if (requestInterceptor) {\n        await requestInterceptor(this);\n      }\n    } catch (error) {\n      console.error(error);\n    }\n    const response = new FetchResponse(await window.fetch(this.url, this.fetchOptions));\n    if (response.unauthenticated && response.authenticationURL) {\n      return Promise.reject(window.location.href = response.authenticationURL);\n    }\n    const responseStatusIsTurboStreamable = response.ok || response.unprocessableEntity;\n    if (responseStatusIsTurboStreamable && response.isTurboStream) {\n      await response.renderTurboStream();\n    }\n    return response;\n  }\n  addHeader(key, value) {\n    const headers = this.additionalHeaders;\n    headers[key] = value;\n    this.options.headers = headers;\n  }\n  sameHostname() {\n    if (!this.originalUrl.startsWith(\"http:\")) {\n      return true;\n    }\n    try {\n      return new URL(this.originalUrl).hostname === window.location.hostname;\n    } catch (_) {\n      return true;\n    }\n  }\n  get fetchOptions() {\n    return {\n      method: this.method.toUpperCase(),\n      headers: this.headers,\n      body: this.formattedBody,\n      signal: this.signal,\n      credentials: this.credentials,\n      redirect: this.redirect\n    };\n  }\n  get headers() {\n    const baseHeaders = {\n      \"X-Requested-With\": \"XMLHttpRequest\",\n      \"Content-Type\": this.contentType,\n      Accept: this.accept\n    };\n    if (this.sameHostname()) {\n      baseHeaders[\"X-CSRF-Token\"] = this.csrfToken;\n    }\n    return compact(Object.assign(baseHeaders, this.additionalHeaders));\n  }\n  get csrfToken() {\n    return getCookie(metaContent(\"csrf-param\")) || metaContent(\"csrf-token\");\n  }\n  get contentType() {\n    if (this.options.contentType) {\n      return this.options.contentType;\n    } else if (this.body == null || this.body instanceof window.FormData) {\n      return undefined;\n    } else if (this.body instanceof window.File) {\n      return this.body.type;\n    }\n    return \"application/json\";\n  }\n  get accept() {\n    switch (this.responseKind) {\n     case \"html\":\n      return \"text/html, application/xhtml+xml\";\n\n     case \"turbo-stream\":\n      return \"text/vnd.turbo-stream.html, text/html, application/xhtml+xml\";\n\n     case \"json\":\n      return \"application/json, application/vnd.api+json\";\n\n     default:\n      return \"*/*\";\n    }\n  }\n  get body() {\n    return this.options.body;\n  }\n  get query() {\n    const originalQuery = (this.originalUrl.split(\"?\")[1] || \"\").split(\"#\")[0];\n    const params = new URLSearchParams(originalQuery);\n    let requestQuery = this.options.query;\n    if (requestQuery instanceof window.FormData) {\n      requestQuery = stringEntriesFromFormData(requestQuery);\n    } else if (requestQuery instanceof window.URLSearchParams) {\n      requestQuery = requestQuery.entries();\n    } else {\n      requestQuery = Object.entries(requestQuery || {});\n    }\n    mergeEntries(params, requestQuery);\n    const query = params.toString();\n    return query.length > 0 ? `?${query}` : \"\";\n  }\n  get url() {\n    return this.originalUrl.split(\"?\")[0].split(\"#\")[0] + this.query;\n  }\n  get responseKind() {\n    return this.options.responseKind || \"html\";\n  }\n  get signal() {\n    return this.options.signal;\n  }\n  get redirect() {\n    return this.options.redirect || \"follow\";\n  }\n  get credentials() {\n    return this.options.credentials || \"same-origin\";\n  }\n  get additionalHeaders() {\n    return this.options.headers || {};\n  }\n  get formattedBody() {\n    const bodyIsAString = Object.prototype.toString.call(this.body) === \"[object String]\";\n    const contentTypeIsJson = this.headers[\"Content-Type\"] === \"application/json\";\n    if (contentTypeIsJson && !bodyIsAString) {\n      return JSON.stringify(this.body);\n    }\n    return this.body;\n  }\n}\n\nasync function get(url, options) {\n  const request = new FetchRequest(\"get\", url, options);\n  return request.perform();\n}\n\nasync function post(url, options) {\n  const request = new FetchRequest(\"post\", url, options);\n  return request.perform();\n}\n\nasync function put(url, options) {\n  const request = new FetchRequest(\"put\", url, options);\n  return request.perform();\n}\n\nasync function patch(url, options) {\n  const request = new FetchRequest(\"patch\", url, options);\n  return request.perform();\n}\n\nasync function destroy(url, options) {\n  const request = new FetchRequest(\"delete\", url, options);\n  return request.perform();\n}\n\nexport { FetchRequest, FetchResponse, RequestInterceptor, destroy, get, patch, post, put };\n"],"names":["FetchResponse","constructor","response","this","statusCode","status","redirected","ok","unauthenticated","unprocessableEntity","authenticationURL","headers","get","contentType","replace","html","match","text","Promise","reject","Error","json","responseJson","responseText","isTurboStream","async","window","Turbo","renderStreamMessage","console","warn","RequestInterceptor","static","interceptor","undefined","getCookie","name","cookies","document","cookie","split","prefix","encodeURIComponent","find","startsWith","value","slice","join","decodeURIComponent","compact","object","result","key","metaContent","element","head","querySelector","content","stringEntriesFromFormData","formData","reduce","entries","concat","mergeEntries","searchParams","File","has","includes","delete","set","append","FetchRequest","method","url","options","originalUrl","toString","requestInterceptor","error","fetch","fetchOptions","location","href","responseStatusIsTurboStreamable","renderTurboStream","addHeader","additionalHeaders","sameHostname","URL","hostname","_","toUpperCase","body","formattedBody","signal","credentials","redirect","baseHeaders","Accept","accept","csrfToken","Object","assign","FormData","type","responseKind","query","originalQuery","params","URLSearchParams","requestQuery","length","bodyIsAString","prototype","call","contentTypeIsJson","JSON","stringify","request","perform","post","put","patch","destroy"],"mappings":"AAAA,MAAMA,cACJC,YAAYC,GACVC,KAAKD,SAAWA,EAEdE,iBACF,OAAOD,KAAKD,SAASG,OAEnBC,iBACF,OAAOH,KAAKD,SAASI,WAEnBC,SACF,OAAOJ,KAAKD,SAASK,GAEnBC,sBACF,OAA2B,MAApBL,KAAKC,WAEVK,0BACF,OAA2B,MAApBN,KAAKC,WAEVM,wBACF,OAAOP,KAAKD,SAASS,QAAQC,IAAI,oBAE/BC,kBACF,MAAMA,EAAcV,KAAKD,SAASS,QAAQC,IAAI,iBAAmB,GACjE,OAAOC,EAAYC,QAAQ,OAAQ,IAEjCH,cACF,OAAOR,KAAKD,SAASS,QAEnBI,WACF,OAAIZ,KAAKU,YAAYG,MAAM,2CAClBb,KAAKc,KAEPC,QAAQC,OAAO,IAAIC,MAAM,sCAAsCjB,KAAKU,yBAEzEQ,WACF,OAAIlB,KAAKU,YAAYG,MAAM,yBAClBb,KAAKmB,eAAiBnB,KAAKmB,aAAenB,KAAKD,SAASmB,QAE1DH,QAAQC,OAAO,IAAIC,MAAM,qCAAqCjB,KAAKU,yBAExEI,WACF,OAAOd,KAAKoB,eAAiBpB,KAAKoB,aAAepB,KAAKD,SAASe,QAE7DO,oBACF,OAAOrB,KAAKU,YAAYG,MAAM,kCAEhCS,0BACE,IAAItB,KAAKqB,cAOP,OAAON,QAAQC,OAAO,IAAIC,MAAM,6CAA6CjB,KAAKU,yBAN9Ea,OAAOC,YACHD,OAAOC,MAAMC,0BAA0BzB,KAAKc,MAElDY,QAAQC,KAAK,qGAQrB,MAAMC,mBACJC,gBAAgBC,GACd9B,KAAK8B,YAAcA,EAErBD,aACE,OAAO7B,KAAK8B,YAEdD,eACE7B,KAAK8B,iBAAcC,GAIvB,SAASC,UAAUC,GACjB,MAAMC,EAAUC,SAASC,OAASD,SAASC,OAAOC,MAAM,MAAQ,GAChE,MAAMC,EAAS,GAAGC,mBAAmBN,MACrC,MAAMG,EAASF,EAAQM,MAAMJ,GAAUA,EAAOK,WAAWH,KACzD,GAAIF,EAAQ,CACV,MAAMM,EAAQN,EAAOC,MAAM,KAAKM,MAAM,GAAGC,KAAK,KAC9C,GAAIF,EACF,OAAOG,mBAAmBH,IAKhC,SAASI,QAAQC,GACf,MAAMC,EAAS,GACf,IAAK,MAAMC,KAAOF,EAAQ,CACxB,MAAML,EAAQK,EAAOE,QACPlB,IAAVW,IACFM,EAAOC,GAAOP,GAGlB,OAAOM,EAGT,SAASE,YAAYjB,GACnB,MAAMkB,EAAUhB,SAASiB,KAAKC,cAAc,cAAcpB,OAC1D,OAAOkB,GAAWA,EAAQG,QAG5B,SAASC,0BAA0BC,GACjC,MAAO,IAAKA,GAAWC,QAAM,CAAGC,GAAUzB,EAAMS,KAAWgB,EAAQC,OAAwB,kBAAVjB,EAAqB,CAAE,CAAET,EAAMS,IAAY,KAAM,IAGpI,SAASkB,aAAaC,EAAcH,GAClC,IAAK,MAAOzB,EAAMS,KAAUgB,EAC1B,KAAIhB,aAAiBnB,OAAOuC,MAC5B,GAAID,EAAaE,IAAI9B,KAAUA,EAAK+B,SAAS,MAAO,CAClDH,EAAaI,OAAOhC,GACpB4B,EAAaK,IAAIjC,EAAMS,QAEvBmB,EAAaM,OAAOlC,EAAMS,GAKhC,MAAM0B,aACJtE,YAAYuE,EAAQC,EAAKC,EAAU,IACjCvE,KAAKqE,OAASA,EACdrE,KAAKuE,QAAUA,EACfvE,KAAKwE,YAAcF,EAAIG,WAEzBnD,gBACE,IACE,MAAMoD,EAAqB9C,mBAAmBnB,MAC1CiE,SACIA,EAAmB1E,MAE3B,MAAO2E,GACPjD,QAAQiD,MAAMA,GAEhB,MAAM5E,EAAW,IAAIF,oBAAoB0B,OAAOqD,MAAM5E,KAAKsE,IAAKtE,KAAK6E,eACrE,GAAI9E,EAASM,iBAAmBN,EAASQ,kBACvC,OAAOQ,QAAQC,OAAOO,OAAOuD,SAASC,KAAOhF,EAASQ,mBAExD,MAAMyE,EAAkCjF,EAASK,IAAML,EAASO,oBAC5D0E,GAAmCjF,EAASsB,qBACxCtB,EAASkF,oBAEjB,OAAOlF,EAETmF,UAAUjC,EAAKP,GACb,MAAMlC,EAAUR,KAAKmF,kBACrB3E,EAAQyC,GAAOP,EACf1C,KAAKuE,QAAQ/D,QAAUA,EAEzB4E,eACE,IAAKpF,KAAKwE,YAAY/B,WAAW,SAC/B,OAAO,KAET,IACE,OAAO,IAAI4C,IAAIrF,KAAKwE,aAAac,WAAa/D,OAAOuD,SAASQ,SAC9D,MAAOC,GACP,OAAO,MAGPV,mBACF,MAAO,CACLR,OAAQrE,KAAKqE,OAAOmB,cACpBhF,QAASR,KAAKQ,QACdiF,KAAMzF,KAAK0F,cACXC,OAAQ3F,KAAK2F,OACbC,YAAa5F,KAAK4F,YAClBC,SAAU7F,KAAK6F,UAGfrF,cACF,MAAMsF,EAAc,CAClB,mBAAoB,iBACpB,eAAgB9F,KAAKU,YACrBqF,OAAQ/F,KAAKgG,QAEXhG,KAAKoF,iBACPU,EAAY,gBAAkB9F,KAAKiG,WAErC,OAAOnD,QAAQoD,OAAOC,OAAOL,EAAa9F,KAAKmF,oBAE7Cc,gBACF,OAAOjE,UAAUkB,YAAY,gBAAkBA,YAAY,cAEzDxC,kBACF,OAAIV,KAAKuE,QAAQ7D,YACRV,KAAKuE,QAAQ7D,YACE,MAAbV,KAAKyF,MAAgBzF,KAAKyF,gBAAgBlE,OAAO6E,cAArD,EAEIpG,KAAKyF,gBAAgBlE,OAAOuC,KAC9B9D,KAAKyF,KAAKY,KAEZ,mBAELL,aACF,OAAQhG,KAAKsG,cACZ,IAAK,OACJ,MAAO,mCAER,IAAK,eACJ,MAAO,+DAER,IAAK,OACJ,MAAO,6CAER,QACC,MAAO,OAGPb,WACF,OAAOzF,KAAKuE,QAAQkB,KAElBc,YACF,MAAMC,GAAiBxG,KAAKwE,YAAYnC,MAAM,KAAK,IAAM,IAAIA,MAAM,KAAK,GACxE,MAAMoE,EAAS,IAAIC,gBAAgBF,GACnC,IAAIG,EAAe3G,KAAKuE,QAAQgC,MAE9BI,EADEA,aAAwBpF,OAAO6E,SAClB7C,0BAA0BoD,GAChCA,aAAwBpF,OAAOmF,gBACzBC,EAAajD,UAEbwC,OAAOxC,QAAQiD,GAAgB,IAEhD/C,aAAa6C,EAAQE,GACrB,MAAMJ,EAAQE,EAAOhC,WACrB,OAAO8B,EAAMK,OAAS,EAAI,IAAIL,IAAU,GAEtCjC,UACF,OAAOtE,KAAKwE,YAAYnC,MAAM,KAAK,GAAGA,MAAM,KAAK,GAAKrC,KAAKuG,MAEzDD,mBACF,OAAOtG,KAAKuE,QAAQ+B,cAAgB,OAElCX,aACF,OAAO3F,KAAKuE,QAAQoB,OAElBE,eACF,OAAO7F,KAAKuE,QAAQsB,UAAY,SAE9BD,kBACF,OAAO5F,KAAKuE,QAAQqB,aAAe,cAEjCT,wBACF,OAAOnF,KAAKuE,QAAQ/D,SAAW,GAE7BkF,oBACF,MAAMmB,EAA8D,oBAA9CX,OAAOY,UAAUrC,SAASsC,KAAK/G,KAAKyF,MAC1D,MAAMuB,EAAqD,qBAAjChH,KAAKQ,QAAQ,gBACvC,OAAIwG,IAAsBH,EACjBI,KAAKC,UAAUlH,KAAKyF,MAEtBzF,KAAKyF,MAIhBnE,eAAeb,IAAI6D,EAAKC,GACtB,MAAM4C,EAAU,IAAI/C,aAAa,MAAOE,EAAKC,GAC7C,OAAO4C,EAAQC,UAGjB9F,eAAe+F,KAAK/C,EAAKC,GACvB,MAAM4C,EAAU,IAAI/C,aAAa,OAAQE,EAAKC,GAC9C,OAAO4C,EAAQC,UAGjB9F,eAAegG,IAAIhD,EAAKC,GACtB,MAAM4C,EAAU,IAAI/C,aAAa,MAAOE,EAAKC,GAC7C,OAAO4C,EAAQC,UAGjB9F,eAAeiG,MAAMjD,EAAKC,GACxB,MAAM4C,EAAU,IAAI/C,aAAa,QAASE,EAAKC,GAC/C,OAAO4C,EAAQC,UAGjB9F,eAAekG,QAAQlD,EAAKC,GAC1B,MAAM4C,EAAU,IAAI/C,aAAa,SAAUE,EAAKC,GAChD,OAAO4C,EAAQC"}